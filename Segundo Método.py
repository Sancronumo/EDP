# -*- coding: utf-8 -*-
"""SeriesDeFourier.ipynb
@Autor: Elena Esquivel

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-FKuoFvCsAiSBv_DfTMfy-pE9FghMkCp
"""
# Se importan las librerias necesarias
import numpy as np
import scipy.integrate as integrate
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

# Se definen los puntos en x y en t donde se desea evaluar la función
x = np.linspace(0,10,num=100)
t = np.linspace(0,10,num=100)

# Se define el número de términos de la serie de Fourier con la que se
# quiere aproximar la función
n_max = 10



def CalcularKn(n):
    '''
    Calcula los coeficientes k=n*pi/Lx

    Parámetros
    ----------
    n : Numerador de la serie de Fourier, define el valor de k

    Devuelve
    -------
    kn : El valor de k

    '''
    kn = (np.pi*n)/Lx
    return kn

def CalcularIntegrando(x,n):
    '''
    Calcula el valor de f(x)*sin(kx) que se encuentra dentro de la integral de Cn

    Parámetros
    ----------
    x : Valor de posición de la función
    n : Numerador de la serie de Fourier, define el valor de k dentro del seno

    Devuelve
    -------
    integrando : valor de f(x)*sin(kx)

    '''
    # Se definen las constantes que definen la función de calor en x cuando
    # el t es cero
    x0 = 5
    l = 1.5
    A = 2
    integrando=A*np.exp((-(x-x0)**2)/l)*np.sin(CalcularKn(n)*x)
    return integrando

def CalcularCn(x,n):
    '''
    Calcula los valors de Cn resolviendo la integral para f(x)*sin(kx)

    Parámetros
    ----------
    x : Valor de posición de la función
    n : Numerador de la serie de Fourier, define el valor de k dentro del seno

    Devuelve
    -------
    Cn : Constantes de la serie de Fourier

    '''
    Lx = 10
    Cn=integrate.quad(CalcularIntegrando, 0, Lx,args=(n))
    Cn=2/Lx*Cn[0]
    return Cn

def CalcularFourier(n_max,x,t):
    '''
    Calcula la suma parcial de serie de Fourier para cierta cantidad de 
    iteraciones en un espacio y tiempo definidos

    Parámetros
    ----------
    n_max : número de términos de la suma parcial
    x : Valor de posicion
    t : Valor del tiempo

    Devuelve
    -------
    sumaParcial : valor de la suma parcial de la serie de Fourier

    '''
    sumaParcial = 0
    for n in range(1,n_max):
        exponencial=np.exp(-D*(CalcularKn(n))**2*t)
        sumaParcial += CalcularCn(x,n)*exponencial*np.sin(CalcularKn(n)*x)
    return sumaParcial

D = 0.5
Lx = 10

# Se definen dos ciclos para que se calcule la serie de Fourier en cada punto
# del tiempo y espacio requeridos
rho = np.zeros([len(t),len(x)])
for j in range(0,len(t)):
    for i in range(0,len(x)):
        rho[j,i]=CalcularFourier(n_max,x[i],t[j])

# Grafica la matriz rho en 3D, siendo Y el tiempo, X la posición en x y el eje
# Z el valor de rho (calor)
fig=plt.figure()
ax=Axes3D(fig)
X, T= np.meshgrid(x,t)
ax.plot_surface(X,T,rho)
ax.set_xlabel('Valores de espacio')
ax.set_ylabel('Valores de tiempo')
ax.set_zlabel('Valores de calor')
plt.show()

